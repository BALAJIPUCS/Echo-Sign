// pubspec.yaml dependencies
//   tflite: ^1.1.2
//   audioplayers: ^5.2.0
//   flutter_audio_capture: ^1.0.2

import 'package:flutter/material.dart';
import 'package:tflite/tflite.dart';
import 'package:flutter_audio_capture/flutter_audio_capture.dart';
import 'dart:typed_data';
import 'dart:math';

void main() {
  runApp(EchoSignApp());
}

class EchoSignApp extends StatefulWidget {
  @override
  _EchoSignAppState createState() => _EchoSignAppState();
}

class _EchoSignAppState extends State<EchoSignApp> {
  final FlutterAudioCapture _audioCapture = FlutterAudioCapture();
  String _predictedLabel = "Press mic to start";
  bool _isRecording = false;

  @override
  void initState() {
    super.initState();
    loadModel();
  }

  Future<void> loadModel() async {
    String? res = await Tflite.loadModel(
      model: "assets/echosign_model.tflite", // trained InceptionV3 model
      labels: "assets/labels.txt",
    );
    print("Model loading result: $res");
  }

  void startRecording() async {
    await _audioCapture.start(listener, onError,
        sampleRate: 22050, bufferSize: 3000);
    setState(() {
      _isRecording = true;
    });
  }

  void stopRecording() async {
    await _audioCapture.stop();
    setState(() {
      _isRecording = false;
    });
  }

  void listener(dynamic obj) async {
    // obj is Float32List PCM data
    Float32List buffer = obj;
    // TODO: Convert buffer -> MFCC -> pass to model
    // For now, assuming raw waveform works with your TFLite model
    var output = await Tflite.runModelOnAudio(
      path: buffer.toString(),
      numResults: 1,
      threshold: 0.5,
    );
    if (output != null && output.isNotEmpty) {
      setState(() {
        _predictedLabel = output[0]["label"];
      });
    }
  }

  void onError(Object e) {
    print("Audio capture error: $e");
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text("EchoSign")),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Text("Prediction: $_predictedLabel",
                  style: TextStyle(fontSize: 20)),
              SizedBox(height: 30),
              ElevatedButton.icon(
                onPressed: _isRecording ? stopRecording : startRecording,
                icon: Icon(_isRecording ? Icons.stop : Icons.mic),
                label: Text(_isRecording ? "Stop" : "Record"),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
